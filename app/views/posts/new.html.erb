<h1>新規投稿ページ</h1>
<%= form_with url: "/posts", method: :post, local: true do |form| %>
  <%= form.text_field :content %>
  <%= form.submit '投稿する'%>
<% end %>
<%# Railsアプリケーションでは、ヘルパーメソッドというものを使用し、フォームを作る
・ヘルパーメソッド
Railsにおける、主にビューでHTMLタグを出現させたりテキストを加工するために使用するメソッドの総称です。
Railsに初めから用意されているヘルパーメソッドの一例を紹介します。

ヘルパーメソッド      | 使用用途                               |
form_with          | 投稿ページなどにおけるフォームの実装        |
link_to            | リンクの実装                            |
これ以外にも沢山のヘルパーメソッドが存在し自作する事も可能。 %>

<%# ・form_withメソッド
フォームを実装するためのヘルパーメソッドでHTMLのformタグの代わりに使用できる。
書き方
<%= form_with url: "/posts", method: :post, local: true do |form| >
  <%= form.text_field :content >
  <%= form.submit '投稿する'>
<% end >
ヘルパーメソッドはRubyとして取り扱われるので、表示するために<%= >で囲んで使用する。 %>

<%# ヘルパーメソッドの利点
１、パスの指定やRubyの埋め込みなどの記述がシンプルになるため
２、セキュリティ上の問題を解消するため %>

<%# form_withは、do~endまでの間がフォームの記述になる。
したがって、do~endの間に、表示される投稿フォームの内容を記述していきます。 %>

<%# form_withに指定する引数について
<%= form_with url: "/posts", merhod: :post, local: true do |form| >
1行目のform_withの引数、url:, method:, local:,という記述は「オプション」と呼ばれ、それぞれフォームがどのような動作を行うかを決めている。

urlオプション: フォームの情報を送るリクエストのパスを指定
method: フォームの情報を送るリクエストのHTTPメソッドを指定。オプションの初期値は:postなので、postメソッドを指定する場合は省略する事が可能
localオプション: リモート送信を無効にするかどうかを指定。「true」にすると無効になる。
 %>

<%# form_withでのフォームの部品の作り方。
２〜３行目の<%= form.text_field :content > ~ <%= form.submit '投稿する'>という記述では、ビューに表示されるフォーム部品を生成している。
form_withのブロック変数「form」とヘルパーメソッドを組み合わせることで、フォームに部品を追加できる。

以下にフォームの部品を生成する主なヘルペーメソッドを示す。
text_field: １行のテキストボックス
password_field: パスワード入力ボックス（入力したテキストがアスタリスクなどに置き換えて表示される。）
check_box: チェックボックス（複数選択可能）
radio_button: ラジオボタン（複数の中から１つしか選択できない）
submit: 送信ボタン
submitをのぞいて、これらのヘルパーメソッドの引数には、name属性にあたる名前が入ります。 %>